@using ApexCharts;
@using System.Timers
@implements IDisposable

<input @bind-value="text" />

@*remove Options and UpdateSeries() will work with InvokeAsync(StateHasChanged)*@
<ApexChart @ref="chart" Height="400" Width="600" TItem="Data" Options="Data.GetOptions()">
    <ApexPointSeries SeriesType="SeriesType.Bar"
                     TItem="Data" Items="dataList"
                     XValue="@(data => "xVal")" YValue="@(data => data.Value)" />
</ApexChart>

@code {
    class Data
    {
        public int Value { get; set; }

        static Random random = new();
        public static ApexChartOptions<Data> GetOptions()
        {
            ApexChartOptions<Data> options = new();
            options.Yaxis = new() { new() { Min = 0, Max = 50 } };
            return options;
        }

        public Data()
        {
            Value = random.Next(1, 30);
        }

        public void Update()
        {
            Value = random.Next(1, 30);
        }
    }

    List<Data> dataList = new();

    ApexChart<Data> chart;

    string text = "text";

    private bool timerInitialized;
    private Timer timer;

    protected override void OnInitialized()
    {
        for (int i = 0; i < 5; i++)
        {
            dataList.Add(new());
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && !timerInitialized)
        {
            timerInitialized = true;
            timer = new Timer(2000);
            timer.Elapsed += async delegate { await UpdateChartSeries(); };
            timer.Enabled = true;
        }
    }

    private async Task UpdateChartSeries()
    {
        foreach (var data in dataList)
        {
            data.Update();
        }

        text = dataList[0].Value.ToString();
        await InvokeAsync(() => StateHasChanged()); // comment this line for UpdateSeries() to work again

        await chart.UpdateSeriesAsync();
    }

    public void Dispose()
    {
        timer?.Stop();
        timer = null;
    }
}
